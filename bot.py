import logging
import os
import uuid
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, CallbackQueryHandler
from telegram.ext import filters
import instaloader
from telegram.ext import PicklePersistence

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
async def start(update: Update, context: CallbackContext) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ
    if context.user_data.get('welcome_message_sent', False) is False:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º
        message = await update.message.reply_text(
            '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫–æ –º–Ω–µ ‚Äî @Dfox8998 üòä',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ', url='https://t.me/Dfox8998')]])
        )
        await message.pin()
        context.user_data['welcome_message_sent'] = True  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
    keyboard = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å üëá", callback_data='start')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ Instagram. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è –Ω–∞—á–Ω—É —Ä–∞–±–æ—Ç—É! üì∏',
        reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'start':
        await query.edit_message_text(text="–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ Instagram, –∏ —è –ø–æ–º–æ–≥—É —Å–∫–∞—á–∞—Ç—å.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ Instagram
async def download_video(update: Update, context: CallbackContext) -> None:
    video_url = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ Instagram —Å—Å—ã–ª–∫–∞
    if 'instagram.com' not in video_url:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ Instagram. üì∏')
        return

    loader = instaloader.Instaloader()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ
        post = instaloader.Post.from_shortcode(loader.context, video_url.split('/')[-2])

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        download_folder = 'downloads'
        os.makedirs(download_folder, exist_ok=True)

        # –°–∫–∞—á–∏–≤–∞–µ–º –ø–æ—Å—Ç –≤ –ø–∞–ø–∫—É
        loader.download_post(post, target=download_folder)
        
        # –ò—â–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫
        files = os.listdir(download_folder)
        
        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .mp4
        video_filename = None
        for file in files:
            if file.endswith('.mp4'):
                video_filename = os.path.join(download_folder, file)
                break
        
        if video_filename:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            unique_filename = f'{uuid.uuid4()}.mp4'

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(video_filename, 'rb') as video_file:
                await update.message.reply_video(video=video_file, caption="–í–æ—Ç –≤–∞—à–µ –≤–∏–¥–µ–æ! üì∏\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å –µ—â—ë, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Å—ã–ª–∫—É.")

            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            os.remove(video_filename)

        else:
            await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –≤ —Å–∫–∞—á–∞–Ω–Ω–æ–º –ø–æ—Å—Ç–µ. üòï')

    except Exception as e:
        await update.message.reply_text(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {str(e)}')

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main() -> None:
    # –¢–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather
   import os
TOKEN = os.getenv("BOT_TOKEN")


    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Application —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
persistence = PicklePersistence("bot_data")
application = Application.builder().token(TOKEN).persistence(persistence).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, download_video))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
application.add_handler(CallbackQueryHandler(button))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
application.run_polling()

if __name__ == '__main__':
    main()
